###
# app configuration
# http://docs.pylonsproject.org/projects/pyramid/en/1.6-branch/narr/environment.html
###

[app:app]
use = egg:github-app-geo-project
filter-with = proxy-prefix

sqlalchemy.url = %(SQLALCHEMY_URL)s
sqlalchemy.pool_recycle = %(SQLALCHEMY_POOL_RECYCLE)s
sqlalchemy.pool_size = %(SQLALCHEMY_POOL_SIZE)s
sqlalchemy.max_overflow = %(SQLALCHEMY_MAX_OVERFLOW)s

sqlalchemy-slave.url = %(SQLALCHEMY_SLAVE_URL)s
sqlalchemy-slave.pool_recycle = %(SQLALCHEMY_SLAVE_POOL_RECYCLE)s
sqlalchemy-slave.pool_size = %(SQLALCHEMY_SLAVE_POOL_SIZE)s
sqlalchemy-slave.max_overflow = %(SQLALCHEMY_SLAVE_MAX_OVERFLOW)s

c2c.sql_request_id = True
c2c.requests_default_timeout = 30
c2c.base_path = /c2c

service-url = http://localhost:8080/
default-application = generic
applications =
    generic
    pull-request

application.generic.github_app_id = %(GHCI_GENERIC_GITHUB_APP_ID)s
application.generic.github_app_private_key = %(GHCI_GENERIC_GITHUB_APP_PRIVATE_KEY)s
application.generic.github_app_url = %(GHCI_GENERIC_GITHUB_APP_URL)s
application.generic.title = Main application
application.generic.description = This is the main application
application.generic.modules =
    m1
    m2

application.pull-request.github_app_id = %(GHCI_PULL_REQUEST_GITHUB_APP_ID)s
application.pull-request.github_app_private_key = %(GHCI_PULL_REQUEST_GITHUB_APP_PRIVATE_KEY)s
application.pull-request.github_app_url = %(GHCI_PULL_REQUEST_GITHUB_APP_URL)s
application.pull-request.title = Pull request application
application.pull-request.description = This application will auto review and auto merge some pull requests
application.pull-request.modules =
    m3
    m4

[pipeline:main]
pipeline = egg:c2cwsgiutils#client_info egg:c2cwsgiutils#sentry app

[filter:proxy-prefix]
use = egg:PasteDeploy#prefix
prefix = %(VISIBLE_ENTRY_POINT)s

[server:main]
use = egg:waitress#main
listen = *:8080

###
# logging configuration
# http://docs.pylonsproject.org/projects/pyramid/en/1.6-branch/narr/logging.html
###

[loggers]
keys = root, gunicorn, sqlalchemy, c2cwsgiutils, github_app_geo_project

[handlers]
keys = console, json

[formatters]
keys = generic

[logger_root]
level = %(OTHER_LOG_LEVEL)s
handlers = %(LOG_TYPE)s

[logger_github_app_geo_project]
level = %(LOG_LEVEL)s
handlers =
qualname = github_app_geo_project

[logger_gunicorn]
level = %(GUNICORN_LOG_LEVEL)s
handlers =
qualname = gunicorn.error

[logger_c2cwsgiutils]
level = %(C2CWSGIUTILS_LOG_LEVEL)s
handlers =
qualname = c2cwsgiutils

[logger_sqlalchemy]
level = %(SQL_LOG_LEVEL)s
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[handler_console]
class = StreamHandler
args = (sys.stdout,)
level = NOTSET
formatter = generic

[handler_json]
class = c2cwsgiutils.pyramid_logging.JsonLogHandler
args = (sys.stdout,)
level = NOTSET

[formatter_generic]
format = %(levelname)-5.5s %(name)s %(message)s
datefmt = [%Y-%m-%d %H:%M:%S %z]
class = logging.Formatter
